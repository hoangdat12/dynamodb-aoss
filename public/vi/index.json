[
{
	"uri": "//localhost:1313/vi/",
	"title": "Replicate và synchronize dữ liệu từ DynamoDB đến OpenSearch Serverless",
	"tags": [],
	"description": "",
	"content": "Replicate và synchronize dữ liệu từ DynamoDB đến OpenSearch Serverless Tổng quan Trong bài lab này, bạn sẽ học về những khái niệm của DynamoDB, OpenSearch Serverless và làm sao chúng ta có thể replicate và synchronize dữ liệu từ DynamoDB đến OpenSearch Serverless để tối ưu các truy vấn tìm kiến, bạn cũng có thể thực hành tạo DynamoDB, OpenSearch Serverless\nNội dung Giới thiệu Các bước chuẩn bị Replicate dữ liệu Synchronize dữ liệu Dọn dẹp Tài nguyên Thực hiện với Terraform "
},
{
	"uri": "//localhost:1313/vi/4-synchronize/4.1-dynamodbstream/",
	"title": "Đồng bộ dữ liệu với DynamoDB Stream",
	"tags": [],
	"description": "",
	"content": "A DynamoDB Stream là một chuỗi sự kiện được sắp xếp theo thời gian ghi lại tất cả các sửa đổi cho các DynamoDB table near real-time. Tương tự như việc thu thập dữ liệu thay đổi, DynamoDB Streams bao gồm nhiều sự kiện Insert, Update và Delete. Mỗi bản ghi có một số thứ tự duy nhất được sử dụng để sắp xếp.\nTổng quan kiến trúc sau khi hoàn thành bước này sẽ như sau:\nCreate Lambda function Truy cập vào Giao diện quản lý Lambda Chọn Functions Click Create function Trong bước Create function Chọn Author from scratch Tại Runtime, chọn Python 3.12 (phiên bản mới nhất) Nhập sync-data-with-dynamodb-stream Tại Change default execution role, chọn Use an existing role Chọn lambda-lab-role lambda-lab-role là một IAM Role mà chúng ta đã tạo ở những bước trước\nClick Create function Tải Lambda function\nClick Upload và chọn file mà bạn vừa tải, sau đó thực hiện upload nó\nTrong DynamoDB stream, event sẽ có 3 loại: INSERT, REMOVE and MODIFY\nBật Dynamodb Stream Để đồng bộ dữ liệu với DynamoDB Stream, chúng ta cần bật DynamoDB Stream trong DynamoDB table\nTruy cập vào Giao diện quản trị DynamoDB Chọn Tables Click lab-table Trong lab-table Chọn Exports and Streams Tại DynamoDB stream details, click Turn on Trong Turn on DynamoDB stream Chọn New image Click Turn on stream Bây giờ, sau khi bật stream, chúng ta cần tạo một Lambda function để nhận record được gửi đi từ DynamoDB stream, nhưng trước khi làm việc đó, chúng ta cần cập nhật lambda-lap-role để cho phép lambda nhận record từ DynamoDB stream.\nTruy cập vào Giao diện quản trị IAM Chọn Roles Tìm và chọn 006-editlambdarole.png Trong lambda-lap-role Click Add permissions Click Create inline policy Trong bước Specify permissions Click Json Sao chép và dán đoạn cấu hình dưới { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;APIAccessForDynamoDBStreams\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:GetRecords\u0026#34;, \u0026#34;dynamodb:GetShardIterator\u0026#34;, \u0026#34;dynamodb:DescribeStream\u0026#34;, \u0026#34;dynamodb:ListStreams\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:dynamodb:\u0026lt;aws-region\u0026gt;:\u0026lt;aws-account-id\u0026gt;:table/\u0026lt;dynamodb-table-name\u0026gt;/stream/*\u0026#34; } ] } Kéo xuống và click Next Trong Review and create Nhập dynamodb-stream-data Click Create policy Sau khi tạo dynamodb-stream-data, chúng ta cần tạo aoss-policy với nội dung như bến dưới { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;aoss:APIAccessAll\u0026#34;, \u0026#34;aoss:DeleteCollection\u0026#34;, \u0026#34;aoss:*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor1\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;aoss:DashboardsAccessAll\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Sau khi cập nhật IAM Role, chúng ta sẽ quay trở lại AWS DynamoDB Console Chọn Exports and Streams Kéo xuống và chọn Create trigger Trong bước Create a trigger Chọn sync-data-with-dynamodb-stream Click Create trigger Trước khi thực hiện kiểm tra, chúng ta cần tạo một vài biến môi trường như những bước trước - khi chúng ta tạo Replicate Lambda function.\nĐể kiểm tra DynamoDB Streams pipeline, chúng ta truy cập vào AWS API Gateway Console\nChọn APIs Chọn dynamodb-api-gw Trong dynamodb-api-gw Chọn POST Chọn Test Tại Request body, sao chép và dán { \u0026#34;name\u0026#34;: \u0026#34;Test DynamoDB Stream Pipeline\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Test\u0026#34; } Kéo xuống và click Test Chúng tôi có thể xác minh việc tạo dữ liệu thành công. Bằng cách truy cập vào Giao diện quản trị Cloud Watch để xem log.\nCloudWatch cho phép bạn giám sát toàn bộ ngăn xếp của mình (ứng dụng, cơ sở hạ tầng, mạng và dịch vụ) và sử dụng cảnh báo, nhật ký và dữ liệu sự kiện để thực hiện các hành động tự động và giảm thời gian giải quyết trung bình (MTTR). Điều này giải phóng các nguồn lực quan trọng và cho phép bạn tập trung vào việc xây dựng ứng dụng và giá trị kinh doanh.\nBạn có thể thấy như bên dưới:\nBạn cũng có thể xem dữ liệu trong DynamoDB table hoặc OpenSearch Dashboard, bạn cũng có thể thực hiện các thao tác xóa hoặc chỉnh sửa để tìm hiểu thêm về các thao tác trong DynamoDB\n"
},
{
	"uri": "//localhost:1313/vi/3-replicate/3.1-exportdynamodbdatatos3/",
	"title": "Export DynamoDB Data",
	"tags": [],
	"description": "",
	"content": "Để replicate data từ DynamoDB đến Amazon OpenSearch Serverless, chúng ta cần phải export data từ DynamoDB đến Amazon S3 bucket.\nExport DynamoDB data Truy cập vào Giao diện quản trị S3 Chọn Exports to S3 Click Export to S3 Để export data from DynamoDB đến S3, chúng ta cần phải bật PITR (Point-in-time recovery). PITR (Point-in-time recovery) giúp bảo vệ DynamoDB table của bạn khỏi những thao tác ghi hoặc xóa ngẫu nhiên. Với point-in-time recovery, bạn không cần phải lo lắng về việc tạo, duy trì hoặc tạo một lịch để backup dữ liệu.\nTrong bước Export to S3 Tại Source table, chọn lab-table Click Turn on PITR Nhập S3 destination s3://dynamodb-export-data-lab Chọn This AWS account Chọn Full export Chọn Current time Chọn DynamoDB JSON Click Export Sau khi export thành công, chúng ta có thể click Destination S3 bucket để kiểm tra.\nChúng ta sẽ thấy file export trong AWSDynamoDB/ folder.\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Serverless là một mô hình phát triển dựa trên điện toán đám mây, cho phép các lập trình viên xây dựng và triển khai ứng dụng mà không cần máy chủ cũng như giảm bớt việc quản lý hạ tầng cho lập trình viên.\nDynamoDB là một dịch vụ fully managed NoSQL databasecung cấp hiệu suất nhanh chóng và dự đoán được với khả năng mở rộng chính xác. DynamoDB cho phép bạn giảm bớt gánh nặng quản lý khi vận hành và mở rộng một distributed database, để bạn không phải lo lắng về việc cung cấp phần cứng, thiết lập và cấu hình, sao chép dữ liệu, cập nhật phần mềm hoặc mở rộng cụm.\nOpenSearch Serverless Amazon OpenSearch Serverless là một tùy chọn serverless trong dịch vụ Amazon OpenSearch. Là một nhà phát triển, bạn có thể sử dụng OpenSearch Serverless để chạy công việc quy mô petabyte mà không cần cấu hình, quản lý và mở rộng các cụm OpenSearch. Thời gian phản hồi chỉ trong millisecond giống như OpenSearch Service nhưng với sự đơn giản của môi trường serverless.\nKinesis Stream là một dịch vụ serverless streaming data giúp đơn giản hóa việc thu thập, xử lý và lưu trữ các luồng dữ liệu ở mọi quy mô, nó được thiết kế để xử lý các luồng dữ liệu quy mô lớn từ nhiều dịch vụ khác nhau trong thời gian thực.\nLambda là một dịch vụ serverless compute, thực thi code của bạn dựa trên các event, xử lý tài nguyên tính toán cho bạn.\nTrong bài lab này, bạn sẽ thực hành tích hợp DynamoDB và OpenSearch Serverless. Bạn sẽ học cách để replicate và synchronize dữ liệu một cách hiệu quả giữa các dịch vụ này bằng cơ chế stream như DynamoDB Streams và Kinesis Streams.\n"
},
{
	"uri": "//localhost:1313/vi/6.terraform/6.1createresource/",
	"title": "Khởi tạo tài nguyên với Terraform",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị code Click ở đây để tải code về Mở code và di chuyển đến thư mục terraform Cài đặt môi trường Tải Terraform Thực hiện câu lệnh để cài đặt Terraform sudo yum install -y yum-utils shadow-utils sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo sudo yum -y install terraform Cấu hình ở local để tương tác với AWS, thực thi lệnh aws configure Khởi tạo tài nguyên Thực thi câu lệnh terraform init để khởi tại tài nguyên cho Terraform Thực thi câu lệnh terraform validate để kiểm tra cú pháp của Terraform file Thực thi câu lệnh terraform plan để tạo hoặc xem sự thay đổi của Terraform Thực thi câu lệnh terraform apply -auto-approve để apply cho aws Tiến hành kiểm tra trong AWS Console Vào EC2 kiểm tra xem có đủ 3 Instance là jenkins instance và 2 nodes Vào EKS kiểm tra xem có eks-cluster Chuẩn bị Tạo Github Access Token Truy cập Github Setting -\u0026gt; Cuộn xuống và chọn Developing Setting -\u0026gt; chọn Personal access token và click Token (classic) Chọn Generate new token và click Generate new token (classic) Nhập jenkins-access Tích tất cả các button ở dưới Click Generate token Để hiểu hơn về cấu hình Github Access Token, chúng ta có thể tham khảo tại đây\nSao chép Token vừa tạo Truy cập Jenkins Browser Tại Dashboard chọn Manages Jenkins Chọn Credentials Click globals Click Add credentials Chọn Kind is Username with password Nhập Github username và token vừa tạo Nhập ID jenkins-git Chọn Create Tạo Docker hub Access Token Truy cập Docker hub -\u0026gt; chọn My Account Chọn Security Chọn New Access Token Nhập Access token Description Click Generate Sao chép Docker Access Token và làm tương tự với Github Access Token trong Jenkins Truy cập Jenkins Browser Tại Dashboard chọn Manages Jenkins Chọn Credentials Click globals Click Add credentials Chọn Kind là Username with password Nhập Docker username và token vừa tạo Nhập ID docker-crd Chọn Create Tạo AWS_ACCESS_KEY_ID Truy cập Jenkins Browser Tại Dashboard chọn Manages Jenkins Chọn Credentials Click globals Click Add credentials Chọn Kind là Secret text Nhập Docker secret của aws_access_key_id trong file.cvs Nhập ID AWS_ACCESS_KEY_ID Chọn Create Tạo AWS_SECRET_ACCESS_KEY Truy cập Jenkins Browser Tại Dashboard chọn Manages Jenkins Chọn Credentials Click globals Click Add credentials Chọn Kind is Secret text Nhập Docker secret của aws_secret_access_key trong file.cvs Nhập ID AWS_SECRET_ACCESS_KEY Chọn Create Hoàn tất Sau khi hoàn thành, Jenkins Credentails của chúng ta sẽ có 4 file như bên dưới CICD Triển khai CICD như Phần 4\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-createdynamodb/",
	"title": "Tạo DynamoDb table",
	"tags": [],
	"description": "",
	"content": "DynamoDB DynamoDB là dịch vụ cơ sở dữ liệu NoSQL hoàn toàn được quản lý bởi AWS, cung cấp hiệu suất nhanh chóng và dự đoán được với khả năng mở rộng linh hoạt. DynamoDB giúp bạn giảm bớt gánh nặng quản lý của việc vận hành và mở rộng cơ sở dữ liệu phân tán, giúp bạn không cần lo lắng về việc cung cấp phần cứng, thiết lập và cấu hình, sao chép dữ liệu, việc vá lỗi phần mềm, hoặc việc mở rộng cụm.\nTrong bước này, chúng ta cần tạo một DynamoDB table\nTạo DynamoDB table Truy cập vào Giao diện quản trị DynamoDB Chọn Tables Click Create table Khi tạo một Table và xác định schema cho DynamoDB của bạn, một trong những lựa chọn đầu tiên bạn sẽ được hỏi là xác định Partition Key và Sort Key cho table của bạn. Đây là một quyết định quan trọng có ảnh hưởng đến cách mà các bản ghi trong table của bạn có thể được truy cập.\nA DynamoDB Partition Key đóng vai trò như là chỉ số chính để phân vùng dữ liệu của bạn trên nhiều storage nodes của DynamoDB. Đó là một thành phần bắt buộc khi thiết lập một DynamoDB table. Partition Key giúp phân phối dữ liệu của bạn trên các Partition khác nhau.\nA DynamoDB Sorted Key là một thuộc tính tùy chọn cho phép sắp xếp các mục bên trong mỗi Partition. Bằng cách chỉ định một Sort Key, bạn cho phép DynamoDB sắp xếp các bản ghi trong một Partition dựa trên giá trị của Sort Key.\nTrong bước Create table Tại Partition key, nhập id Tại Table settings, Chọn Default settings Click Create Kiểm tra tạo DynamoDB table thành công Sau khi click Create, đợi một vài phút, và bạn sẽ nhìn thấy lab-table xuất hiện. 3.Tạo IAM Role cho API Gateway có thể truy cập DynamoDB\nChúng ta cần tạo IAM Role cho API Gateway có quyển put Item vào trong DynamoDB Để tạo IAM Role\nTruy cập vào Giao diện quản trị IAM Chọn Policies Click Create policy Trong bước Create policy Click Json Sao chép và dán Policy editor { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;Statement1\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:PutItem\u0026#34; ], \u0026#34;Resource\u0026#34;: [\u0026#34;arn:aws:dynamodb:\u0026lt;your-region\u0026gt;:\u0026lt;your-aws-account-id\u0026gt;:table/\u0026lt;you-dynamodb-table\u0026gt;\u0026#34;] } ] } Click Next Trong bước Review Nhập dynamodb-putitem-policy Kéo xuống và chọn click Create policy Sao khi tạo policy, chúng ta sẽ tạo một IAM Role cho API Gateway\nTrong Giao diện quản trị IAM Chọn Roles Click Create role Trong bước Select trusted entity Chọn AWS service Tại Service or use case, chọn API Gateway Tại Use case, chọn API Gateway Trong bước Add permissions Click Next Trong bước Name, review, and create Nhập dynamodb-api-gw-role Kéo xuống và click Create role Sau khi tạo dynamodb-api-gw-role, chúng ta cần thêm dynamodb-putitem-policy vào role này\nChọn Roles Tìm dynamodb-api-gw-role Click dynamodb-api-gw-role Click Add permissions Click Attach policies Tìm và chọn dynamodb-api-gw-role Click Add permissions "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, chúng ta sẽ thực hiện tạo IAM Role Tạo một DynamoDB table Tạo một API Gateway như một Proxy cho DynamoDB table Tạo một S3 Bucket để lưu file export từ DynamoDB Tạo một OpenSearch Serverless Collection Nội dung Tạo Dynamodb table Tạo API Gateway Tạo OpenSearch Serverless Collection Tạo S3 bucket Chuẩn bị IAM Role "
},
{
	"uri": "//localhost:1313/vi/6.terraform/6.2cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " Thực thi lệnh terraform destroy -auto-approve để dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/3-replicate/3.2-handledataandsaveinaoss/",
	"title": "Replicate đến OpenSearch Serverless",
	"tags": [],
	"description": "",
	"content": "Để stream data từ S3 Bucket đến OpenSearch Serverless, chúng ta cần tạo một Lambda function để index dữ liệu vào trong OpenSearch Serverless.\nLambda là một dịch vụ serverless compute, thực thi code của bạn để phản hồi những event, xử lý tài nguyên tính toán cho bạn.\nTạo Lambda function Truy cập vào Giao diện quản trị Lambda Chọn Functions Click Create function Chọn Author from scratch Nhập replicate-data-handler Tại Runtime, chọn Python 3.12 (phiên bản mới nhất) Click Change default execution role Chọn Use an existing role Chọn lambda-lab-role Click Create function Download Lambda function Trong Lambda function Click Upload from, .zip file và chọn zip file mà bạn vừa tải Sau khi tải Lambda code lên, bạn cần phải cấu hình một vài biến môi trường để code có thể hoạt động.\nChọn Configuration Chọn Environment Click Edit Chúng ta cần thêm những biến môi trường như bên dưới.\nWith OPENSEARCH_HOST, we can access OpenSearch Serverless Collection that you have just created to get it.\nTrước khi thực hiện replicate data, chúng ta cần chỉnh sửa Data access policies của Collection để cho phép Lambda IAM role có thể có quyền trong OpenSearch Serverless Collection.\nData access policies định nghĩa làm cách nào mà user của bạn có thể truy cập vào dữ liệu bên trong Collection. Data access policies giúp bạn quản lý những Collection ở bất kỳ quy mô nào bằng cách tự động gắn quyển truy cập đến những Collection và những index phù hợp với những mẫu nhất đinhk. Nhiều policies có thể được áp dụng cho một tài nguyên. Nó bao gồm một bộ quy tắc, mỗi quy tắc gồm 3 thành phần: loại tài nguyên, tài nguyên được cấp và một một quyền.\nĐể cập nhật Data access policies\nTruy cập vào Giao diện quản trị OpenSearch Serverless Chọn Data access policies Click easy-lab-collection Trong bước Edit access policy Click Add principals Thêm Lambda role arn:aws:iam::\u0026lt;your-aws-account-id\u0026gt;:role/\u0026lt;lambda-role-name\u0026gt; Click Save Để bắt đầu replicate data.\nTruy cập vào Giao diện quản trị Lambda\nChọn Functions và click replicate-data-handler funciton\nClick Test\nTrong bước Configure test event\nChọn Create new event\nNhập replicate-event\nDán cấu hình bên dưới\n{ \u0026#34;Records\u0026#34;: [ { \u0026#34;s3\u0026#34;: { \u0026#34;bucket\u0026#34;: { \u0026#34;name\u0026#34;: \u0026lt;s3-bucket-name\u0026gt; }, \u0026#34;object\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;AWSDynamoDB/\u0026lt;export-folder\u0026gt;/data/\u0026lt;gzip-file\u0026gt;\u0026#34; } } } ] } Click Save và click Test Nếu bạn bắt gặp lỗi timeout, có thể là vì trong lần đầu tiên thực hiện, OpenSearch sẽ tạo ra một index mapping cho dữ liệu mà chúng ta gửi lên nhưng thời gian thực hiện mặc định trong Lambda là 3s, nếu quá thời gian thì nó sẽ throw lỗi timeout. Trong trường hợp này, bạn có thể chạy test lại một lần nữa để index lại dữ liệu. Thêm vào đó, bạn cũng có thể tăng thời gian timeout mặc định của lambda để giải quyết vấn đề này.\n"
},
{
	"uri": "//localhost:1313/vi/4-synchronize/4.2-kinesisstream/",
	"title": "Synchronize Data with Kinesis Stream",
	"tags": [],
	"description": "",
	"content": "Amazon Kinesis Data Streams là một dịch vụ dữ liệu trực tuyến không cần máy chủ giúp đơn giản hóa việc thu thập, xử lý và lưu trữ dữ liệu trực tuyến ở mọi quy mô.\nDữ liệu được lưu trong một luồng Kinesis thường được lưu dưới dạng dữ liệu nhị phân, chúng ta cần chuyển đổi nó trước khi comsume.\nĐể sử dụng Kinesis Stream để đồng bộ dữ liệu từ DynamoDB đến OpenSearch Serverless, chúng ta cần bật Kinesis Stream trong DynamoDB table và tạo một hàm Lambda để xử lý dữ liệu.\nTổng quan kiến trúc sau khi hoàn thành bước này sẽ như sau:\nTạo Kinesis Stream Truy cập vào Giao diện quản lý Kinesis Chọn Data streams Click Create data stream Trong bước Create data stream Nhập kinesis-stream-data-lab Tại Capacity mode, chọn On-demand Kéo xuống và click Create data stream Bật Kinesis Stream Truy cập vào Giao diện quản lý DynamoDB Chọn Tables Click lab-table Trong lab-table Chọn Exports and Streams Tại Amazon Kinesis data stream details, click Turn on Trong bước Enable Kinesis Stream Chọn kinesis-stream-data-lab Chọn Microsecond Click Turn on stream tạo Lambda function Bạn cần tải file này, và làm theo những bước như trong phần 4.1 để tạo ra Lambda function với tên sync-data-with-kinesis-stream.\nBạn cũng cần phải cập nhật IAM Role để thêm quyền cho phép Lambda function consume dữ liệu từ Kinesis Streams.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;kinesis:GetRecords\u0026#34;, \u0026#34;kinesis:GetShardIterator\u0026#34;, \u0026#34;kinesis:DescribeStream\u0026#34;, \u0026#34;kinesis:DescribeStreamSummary\u0026#34;, \u0026#34;kinesis:ListShards\u0026#34;, \u0026#34;kinesis:ListStreams\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:kinesis:\u0026lt;aws-region\u0026gt;:\u0026lt;aws-account-id\u0026gt;:stream/\u0026lt;kinesis-stream-name\u0026gt;\u0026#34; } ] } Sau khi tạo Lambda function, bạn cần Add trigger cho nó\nTruy cập vào sync-data-with-kinesis-stream function Click Add trigger Trong bước Add trigger Chọn Kinesis Chọn kinesis-stream-data-lab Kéo xuống và click Add Để kiểm tra Kinesis Streams pipeline, truy cập vào AWS API Gateway Console\nChọn APIs Chọn dynamodb-api-gw Trong dynamodb-api-gw Chọn POST Chọn Test Tại Request body, sao chép và dán { \u0026#34;name\u0026#34;: \u0026#34;Test Kinesis Stream Pipeline\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Test\u0026#34; } Kéo xuống và click Test Bạn có thể kiểm tra tạo dữ liệu thành công. Bằng cách, Truy cập vào Giao diện quản trị Cloud Watch để xem log.\nCloudWatch cho phép bạn giám sát toàn bộ ngăn xếp của mình (ứng dụng, cơ sở hạ tầng, mạng và dịch vụ) và sử dụng cảnh báo, nhật ký và dữ liệu sự kiện để thực hiện các hành động tự động và giảm thời gian giải quyết trung bình (MTTR). Điều này giải phóng các nguồn lực quan trọng và cho phép bạn tập trung vào việc xây dựng ứng dụng và giá trị kinh doanh.\nBạn có thể thấy như bên dưới:\nBạn cũng có thể xem dữ liệu trong DynamoDB table hoặc OpenSearch Dashboard, bạn cũng có thể thực hiện các thao tác xóa hoặc chỉnh sửa để tìm hiểu thêm về các thao tác trong DynamoDB\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-createapigateway/",
	"title": "Tạo API Gateway",
	"tags": [],
	"description": "",
	"content": "Amazon API Gateway là một dịch vụ được quản lý hoàn toàn bởi AWS, làm cho dễ dàng để tạo, publish, maintain, monitor, và bảo mật APIs ở bất kỳ quy mô nào. APIs đóng vào trò như một \u0026ldquo;cửa trước\u0026rdquo; để truy cập vào ứng dụng, business logic, hoăc chức năng từ phía backend server.\nTrong bước này, chúng ta cần tạo một API Gateway.\nTổng quan kiến trúc sau khi các bạn hoàn tất bước này sẽ như sau:\nTrong bài lap này, chúng ta sẽ sử dụng API Gateway như một Proxy cho DynamoDB.\nTạo API Gateway Truy cập vào Giao diện quản trị API Gateway Chọn APIs Click Create API Trong bước Create API Tại REST API, click Build Trong bước Create REST API Chọn New API Tại API name, nhập dynamodb-api-gw Tại API endpoint type, chọn Regional Click Create API Sau khi tạo thành công, Chúng ta sẽ được đưa đến dynamodb-api-gw mà chúng ta vừa tạo Tạo API Gateway Resource để xử lý data trước khi lưu vào DynamoDB Chọn Resources Click Create resource Trong bước Create resource Tạo Resource name, nhập lab Click Create resource Sau khi tạo Resource, chúng ta cần tạo một method\nMethod bao gồm: GET, POST, PATCH, PUT, DELETE Với ANY method, Nó sẽ match với toàn bộ những method ở trên\nClick lab resource Click Create method Trong bước Create method Tại Method type, chọn POST Chọn AWS service Tại AWS Region, chọn ap-southeast-1 Tại AWS service, chọn DynamoDB Tại HTTP method, chọn POST Tại Action type, chọn Use action name Tại Action name, nhập Query Tại Execution role, nhập arn:aws:iam::\u0026lt;you-aws-account-id\u0026gt;:role/\u0026lt;your-api-gateway-role\u0026gt; Click Create method để hoàn tất Để cho phép API Gateway có thể trực tiếp put Item vào trong DynamoDB mà không cần gọi một Lambda function, chúng ta có thể sử dụng Velocity Template Language (VTL) trong API Gateway. VTL là một ngôn ngữ mạnh mẻ được sử dụng trong Amazon API Gateway để map và chuyển đối API request và response giữa những định dạng dữ liệu khác nhau, như giữa JSON và XML, hoặc để xử lý dữ liệu trước khi trả về cho User.\nChúng ta có thể sử dụng VTL để put Item vào trong DynamoDB.\nChọn lab resource Chọn POST method Chọn Integration request và click Edit Trong Integration request Kéo xuống Mapping templates Nhập application/json Dán đoạn cấu hình dưới vào Mapping templates #set($timestamp = $context.requestTimeEpoch) { \u0026#34;TableName\u0026#34;: \u0026#34;lab-table\u0026#34;, \u0026#34;Item\u0026#34;: { \u0026#34;id\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;$context.requestId\u0026#34; }, \u0026#34;type\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;$input.path(\u0026#39;type\u0026#39;)\u0026#34; }, \u0026#34;name\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;$input.path(\u0026#39;name\u0026#39;)\u0026#34; }, \u0026#34;createdAt\u0026#34;: { \u0026#34;S\u0026#34;: \u0026#34;$context.requestTimeEpoch\u0026#34; } } } Click Save Sau khi tạo Resource, bạn phải deploy để làm cho nó có thể gọi được từ phía User.\nĐể deploy, chúng ta chọn POST và click Deploy API\nTrong bước Deploy API Chọn New Stage Tại Stage name, nhập v1 Click Deploy Bây giờ, chúng ta có thể kiểm tra việc tạo dữ liệu cho DynamoDB từ API Gateway.\nClick Test Nhập { \u0026#34;name\u0026#34;: \u0026#34;Test name\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Test type\u0026#34; } Kéo xuống dưới và chọn Test Sau khi kiểm tra tạo dữ liệu thành công, chúng ta sẽ thấy kết quả như bên dưới.\nBạn có thể lặp lại bước này để có thể đặt thêm dữ liệu vào DynamoDB.\n"
},
{
	"uri": "//localhost:1313/vi/3-replicate/3.3-checkdata/",
	"title": "Kiểm tra Data",
	"tags": [],
	"description": "",
	"content": " Kiểm tra Data Truy cập vào Giao diện quản trị OpenSearch Serverless Chọn Network policies Click Edit Trong Edit network access policy Click Enable access to OpenSearch Dashboards Click Select collection và chọn lab-collection Click Update Bây giờ chúng ta cần chọn Collections Click Dashboard Click Menu icon Click Dev Tools Chúng ta có thể thực hiện truy vấn mặc định trong OpenSearch Dev Tools để kiểm tra xem index mapping có được tạo và dữ liệu đã được ghi hay chưa.\n"
},
{
	"uri": "//localhost:1313/vi/3-replicate/",
	"title": "Sao chép dữ liệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Amazon OpenSearch Serverless là một dịch vụ mạnh mẽ cho phép truy vấn tìm kiếm hiệu quả. Khi tích hợp với DynamoDB, chúng ta cần phải replciate dữ liệu đã tồn tại trong DynamoDB đến OpenSearch.\nTrong bước này, chúng ta sẽ tìm hiểu làm cách nào để replicate dữ liệu từ Amazon DynamoDB đến Amazon OpenSearch Serverless.\nTổng quan kiến trúc sau khi bạn hoàn thành các bước này:\nNội dung Export DynamoDB Data Replicate Đến OpenSearch Serverless Kiểm tra Data "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.3-createopensearchserverless/",
	"title": "Tạo OpenSearch Serverless",
	"tags": [],
	"description": "",
	"content": "OpenSearch Serverless is a serverless option in Amazon OpenSearch Service. As a developer, you can use OpenSearch Serverless to run petabyte-scale workloads without configuring, managing, and scaling OpenSearch clusters. You get the same interactive millisecond response times as OpenSearch Service with the simplicity of a serverless environment.\nOpenSearch Serverless là một dịch vụ serverless trong Amazon OpenSearch Service. Với tư cách là một lập trình viên, bạn có thể sử dụng OpenSearch Serverless để chạy những công việc petabyte-scale workloads mà không cần cấu hình, quản lý và scale cụm OpenSearch. Bạn cũng nhận được thời gian phản hồi trong milisecond tương tự như OpenSearch Service nhờ sự đơn giản của môi trường serverless.\nTrong bước này, chúng ta cần tạo IAM Role cho Lambda function và API Gateway\nTạo Lambda replicate policy Truy cập vào Giao diện quản trị OpenSearch Chọn Collections Chọn Create collection trong bước Configure collection settings Nhập lab-collection Tại Collection type, chọn Search Tại Security, chọn Easy create Kéo xuống và click Next Trong bước Review and create collection Click Create collection "
},
{
	"uri": "//localhost:1313/vi/4-synchronize/",
	"title": "Đồng bộ dữ liệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Amazon DynamoDB Streams theo dõi những thay đổi xảy ra bên trong DynamoDB table và lưu những thông tin này tỏng một log file trong vòng 25 giờ. Ứng dụng có thể truy cập những log này và quan sát những dữ liệu trước khi chúng xuất hiện và sau khi được sửa đổi gần như real-time. Bất cứ khi nào một ứng dụng tạo, cập nhật hoặc sửa dữ liệu trong table, DynamoDB Streams sẽ viết một stream record với thuộc tính primary key của dữ liệu mà được sửa đổi.\nAmazon Kinesis là một bộ dịch vụ cung cấp cách thu thập, xử lý và phân tích dữ liệu thời gian thực một cách dễ dàng. Nó cũng rất tiết kiệm chi phí ở mọi quy mô. Một số trường hợp sử dụng của Amazon Kinesis bao gồm các giải pháp video/audio, luồng click trên trang web và dữ liệu IoT. Trong bài này, chúng ta sẽ sử dụng nó để truyền dữ liệu từ DynamoDB đến OpenSearch Serverless.\nDynamoDB Streams phù hợp nhất để ghi lại các thay đổi cấp độ chi tiết được thực hiện đối với DynamoDB table và xử lý các bản ghi bằng AWS Lambda, trong khi Kinesis Stream tốt hơn cho việc tạo và sử dụng khối lượng lớn dữ liệu cũng như sử dụng Kinesis Analytics, Kinesis Firehose và Lambda để xử lý các bản ghi.\nTrong bước này, chúng ta sẽ đồng bộ dữ liệu từ DynamoDB đến OpenSearch Serverless\nTổng quan kiến trúc sau khi hoàn thành bước này sẽ giống như:\nNội dung Đồng bộ dữ liệu với DynamoDB Stream Đồng bộ dữ liệu với Kinesis Stream "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.4-creates3bucket/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Amazon Simple Storage Service (Amazon S3) là một object storage service cung cấp khả năng mở rộng hàng đầu, tính khả dụng của dữ liệu, bảo mật và hiệu năng cao. Amazon S3 cung cấp các tính năng quản lý để bạn có thể tối ưu hóa, tổ chức và cấu hình quyền truy cập vào dữ liệu của mình để đáp ứng các yêu cầu cụ thể về kinh doanh, tổ chức và tuân thủ của bạn.\nTrong bước này, chúng ta sẽ tạo ra một S3 bucket để lưu trữ file export dữ liệu từ DynamoDB\nTạo S3 Bucket Truy cập vào Giao diện quản trị S3 Chọn Bucket Chọn Create role Trong bước Create bucket Nhập dynamodb-export-data-lab Chọn ACLs disabled Kéo xuống và click Create bucket "
},
{
	"uri": "//localhost:1313/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ làm theo những bước bên dưới để dọn dẹp tài nguyên mà chúng ta đã tạo trong bài lap này.\nTruy cập vào Giao diện quản trị OpenSearch Serverless Chọn Collections. Chọn lab-collection Click Delete và nhập confirm Truy cập vào Giao diện quản trị Kinesis Chọn Data streams. Chọn kinesis-stream-data-lab Click Actions và chọn Delete, sau đó nhập delete Truy cập vào Giao diện quản trị DynamoDB Chọn Tables Click lab-table Chọn Actions và click Delete table, sau đó nhập confirm Bạn cũng làm tương tự cho Lambda function, IAM Role và API Gateway để dọn dẹp những tài nguyên còn lại\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.5-createiamrole/",
	"title": "Chuẩn bị IAM Role",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta cần tạo một IAM Role cho Lambda function và API Gateway\nTạo Lambda replicate Role Truy cập vào Giao diện quản trị IAM Chọn Roles Chọn Create role Trong bước Select trusted entity Chọn AWS service Tại Service or use case, chọn Lambda Tại Use case, chọn Lambda Click Create Trong bước Add permissions Tìm và chọn AWSLambdaExecute Click Next Trong bước Name, review, and create Nhập lambda-lab-role Kéo xuống và click Create role "
},
{
	"uri": "//localhost:1313/vi/6.terraform/",
	"title": "Triển khai với Terraform",
	"tags": [],
	"description": "",
	"content": "Tổng quan Terraform là một công cụ mã nguồn mở cho phép bạn định nghĩa Infrastructure as Code - IaC với đa dạng cloud provider ví dụ: Alibaba Cloud, AWS, Azure… Terraform giúp bạn quản lý hệ thống bằng code và tự động hóa việc triển khai hạ tầng của bạn. Bạn có thể sử dụng Terraform để quản lý các tài nguyên như máy chủ, mạng, cơ sở dữ liệu và các tài nguyên khác của các nhà cung cấp đám mây khác nhau. Trong phần này, chúng ta sẽ tìm hiểu về Terraform và làm việc với các lệnh cơ bản của nó. Nội dung Khởi tạo tài nguyên với Terraform Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]